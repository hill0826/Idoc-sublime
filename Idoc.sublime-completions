{
    "scope": "source.idoc",

    "completions": [
        

        { "trigger": "abortToErrorPage",        "contents": "abortToErrorPage(\"${1:Error Message}\")" },
        { "trigger": "cacheInclude",            "contents": "cacheInclude(${1:includeName}, ${2:scope}, ${3:lifeSpan}, ${4:cacheName}, ${5:key})" },
        { "trigger": "clearSchemaData",         "contents": "clearSchemaData()" },
        { "trigger": "computeRenditionUrl",     "contents": "computeRenditionUrl(${1:url}, ${2:dRevLabel}, \"${3:T|X}\")" },
        { "trigger": "dateCurrent",             "contents": "dateCurrent(${1:daysOffset})" },
        { "trigger": "docLoadResourceIncludes", "contents": "docLoadResourceIncludes(\"dDocName=mydoc&amp;RevisionSelectionMethod=Latest\")" },
        { "trigger": "docRootFilename",         "contents": "docRootFilename(${1:path})" },

        { "trigger": "ssIncludeXml",            "contents": "ssIncludeXml(${1:dDocName}, ${2:xPath})" },
        { "trigger": "ssGetDocInfo",            "contents": "ssGetDocInfo(${1:dDocName})"},
        { "trigger": "ssGetXmlNodeCount",       "contents": "ssGetXmlNodeCount(${1:dDocName}, ${2:xPath})" },
        { "trigger": "ssIncDynamicConversion",  "contents": "ssIncDynamicConversion(${1:template}, ${2:document}, ${3:layout})" },
        { "trigger": "ssIncDynamicConversionByRule", "contents": "ssIncDynamicConversionByRule(${1:dDocName}, ${2:rule})" },
        { "trigger": "ssIncDynamicConversionByRulesEngine", "contents": "ssIncDynamicConversionByRulesEngine(${1:dDocName})" },
        { "trigger": "ssIncInlineDynamicConversion", "contents": "ssIncInlineDynamicConversion(${1:dDocName})" },
        { "trigger": "ssIsNativeDoc",           "contents": "ssIsNativeDoc(${1:dDocName})" },
        { "trigger": "ssCheckAccessPrepareMenu", "contents": "ssCheckAccessPrepareMenu(${1:dDocName}, ${2:actions})" },
        { "trigger": "ssRandom",                "contents": "ssRandom()" },
        { "trigger": "ssGetNodeProperty",       "contents": "ssGetNodeProperty(${1:nodeId}, ${2:propertyName})" },
        { "trigger": "ssGetWebsiteNodeType",    "contents": "ssGetWebsiteNodeType(${1:nodeId})" },
        { "trigger": "ssGetCoreMajorVersion",   "contents": "ssGetCoreMajorVersion()" },
        { "trigger": "ssSplitString",           "contents": "ssSplitString(${1:string}, ${2:delimiter}, ${3:rsName})" },
        { "trigger": "ssGetWebsiteName",        "contents": "ssGetWebsiteName()" },
        { "trigger": "ssGetSiteProperty",       "contents": "ssGetSiteProperty(${1:siteId}, ${2:propertyName})" },
        { "trigger": "ssGetFirstNodeId",        "contents": "ssGetFirstNodeId(${1:siteId})" },
        { "trigger": "ssGetRelativeNodeId",     "contents": "ssGetRelativeNodeId(${1:siteId}, ${2:nodeId}, \"${3:child|parent|prior|next}\")" },
        { "trigger": "ssLoadSiteNavResultSet",  "contents": "ssLoadSiteNavResultSet(${1:siteId}, ${2:nodeId})" },
        { "trigger": "ssGetServerRelativeUrl",  "contents": "ssGetServerRelativeUrl(${1:siteId}, ${2:nodeId})" },
        { "trigger": "ssGetServerRelativePath", "contents": "ssGetServerRelativePath(${1:siteId}, ${2:nodeId})" },
        { "trigger": "ssGetUrlPageName",        "contents": "ssGetUrlPageName(${1:siteId}, ${2:nodeId})" },
        { "trigger": "ssGetNodeLabel",          "contents": "ssGetNodeLabel(${1:siteId}, ${2:nodeId})" },
        { "trigger": "ssGetNodeLabelPath",      "contents": "ssGetNodeLabelPath(${1:siteId}, ${2:nodeId})" },
        { "trigger": "ssGetAllSites",           "contents": "ssGetAllSites(${1:rsName})" },
        { "trigger": "ssLink",                  "contents": "ssLink(${1:dDocName}, ${2:targetNodeId}, ${3:targetSiteId})" },
        { "trigger": "ssNodeLink",              "contents": "ssNodeLink(${1:siteId}, ${2:nodeId})" },
        { "trigger": "ssLocalizeMessage",       "contents": "ssLocalizeMessage(${1:token})" },
        { "trigger": "ssWeblayoutUrl",          "contents": "ssWeblayoutUrl(${1:targetId})" },
        { "trigger": "wcmPlaceholder",          "contents": "wcmPlaceholder(${1:placeholderName}, \"dataFileDocName=dDocName\", \"templateDocName=dDocName\", \"placeholderDefinitionDocName=dDocName\", \"regionDefinitionDocName=dDocName\", \"placeholderActions=EPRISUTMVN\")" },
        { "trigger": "wcmElement",              "contents": "wcmElement(${1:dDocName}, ${2:elementName})" },

        { "trigger": "wcmListStart", "contents": "wcmListStart(elementName)" },
        { "trigger": "wcmListEnd", "contents": "wcmListEnd(elementName)" },
        { "trigger": "wcmListElement", "contents": "wcmListElement(elementName, index)" },
        { "trigger": "wcmListRowCount", "contents": "wcmListRowCount()" },
        { "trigger": "wcmDynamicList", "contents": "wcmDynamicList(elementName)" },
        { "trigger": "wcmIncludeElement", "contents": "wcmIncludeElement(dDocName, xpath)" },
        { "trigger": "wcmDynamicConversion", "contents": "wcmDynamicConversion(ruleName, \"dataFileDocName=dDocName\", \"pageNum=number\", \"conversionsDefinitionDocName=dDocName\", \"conversionType=engine\")" },

        { "trigger": "abortToErrorPage", "contents": "abortToErrorPage(message)" },
	"addEmptyOption",
        "AdminAtLeastOneGroup",
        "AdminAtLeastOneGroup",
        "AfterLogin",
        "AllowCheckin",
        "AllowCheckout",
        "AllowReview",
        "AuthorAddress",
        "AuthorDelete",

        "BrowserVersionNumber",
        

        { "trigger": "cacheInclude", "contents": "cacheInclude(includeName, scope, lifeSpan, cacheName, key)" },
        "CURRENT_DATE",
        "CURRENT_ROW",

        
        "dcShowExportLink",
        { "trigger": "ddLoadIndexedColumnResultSet",    "contents": "ddLoadIndexedColumnResultSet(tableName, rsName, fieldName, index)" },
        { "trigger": "ddAppendResultSet",               "contents": "ddAppendResultSet(tableName, rsName)" },
        { "trigger": "ddApplyTableSortToResultSet",     "contents": "ddApplyTableSortToResultSet(tableName, rsName)" },
        { "trigger": "ddGetFieldList",                  "contents": "ddGetFieldList(tableName)" },
        { "trigger": "ddIncludePreserveValues",         "contents": "ddIncludePreserveValues(includeName, fieldList)" },
        { "trigger": "ddLoadIndexedColumnResultSet",    "contents": "ddLoadIndexedColumnResultSet(tableName, rsName, fieldName, index)" },
        { "trigger": "ddLoadResultSet",                 "contents": "ddLoadResultSet(tableName, rsName)" },
        { "trigger": "ddMergeIndexedColumnResultSet",   "contents": "ddMergeIndexedColumnResultSet(tableName, rsName, fieldName, index, \"replace|append\")" },
        { "trigger": "ddMergeResultSet",                "contents": "ddMergeResultSet(tableName, rsName, \"replace|append\")" },
        { "trigger": "ddMergeIndexedColumnResultSet",   "contents": "ddMergeIndexedColumnResultSet(tableName, rsName, fieldName)" },
        { "trigger": "ddSetLocal",                      "contents": "ddSetLocal(tableName)" },
        { "trigger": "ddSetLocalByColumnsFromFirstRow", "contents": "ddSetLocalByColumnsFromFirstRow(tableName)" },
        { "trigger": "ddSetLocalByColumnsFromFirstRowIndexed", "contents": "ddSetLocalByColumnsFromFirstRowIndexed(tableName, fieldName, index)" },
        { "trigger": "ddSetLocalEmpty",                 "contents": "ddSetLocalEmpty(tableName)" },
        { "trigger": "ddSetLocalEmptyByColumns",        "contents": "ddSetLocalEmptyByColumns(tableName)" },
	"defaultFieldInclude",
	"defaultOptionListScript",
	"DelimitedUserRoles",
        { "trigger": "docLoadResourceIncludes",         "contents": "docLoadResourceIncludes(\"dDocName=mydoc&RevisionSelectionMethod=Latest\")" },
        { "trigger": "docRootFilename",                 "contents": "docRootFilename(path)" },
        "DocTypeSelected",
        "DocUrl",
        { "trigger": "dpGet",                           "contents": "dpGet(key)" },
        { "trigger": "dpPromote",                       "contents": "dpPromote(fieldName, value)" },
        { "trigger": "dpPromoteRs",                     "contents": "dpPromoteRs(rsName, newRsName)" },
        { "trigger": "dpSet",                           "contents": "dpSet(key, value)" },
        "DownloadSuggestedName",

        "EmptyAccountCheckinAllowed",
        { "trigger": "eval",                            "contents": "eval(code)" },
        { "trigger": "executeService",                  "contents": "executeService(serviceName)" },
	"ExternalUserAccounts",
	"ExternalUserRoles",


        "fileUrl",
        { "trigger": "forceExpire",                     "contents": "forceExpire(includeName, \"session|application\", cacheName, key)" },
        { "trigger": "formatDate",                      "contents": "formatDate(stringDate)" },
	"formatDateDisplay",
        { "trigger": "formatDateOnly",                  "contents": "formatDateOnly(stringDate)" },
	"formatDateOnlyDisplay",
        { "trigger": "formatDateOnlyFull",              "contents": "formatDateOnlyFull(stringDate)" },
        { "trigger": "formatDateWithPattern",           "contents": "formatDateWithPattern(date, \"yyyy-MM-dd\")" },
        { "trigger": "formatTimeOnly",                  "contents": "formatTimeOnly(dateString)" },
	"formatTimeOnlyDisplay",


        { "trigger": "generateUniqueId",                "contents": "generateUniqueId(field)" },
        { "trigger": "getDebugTrace",                   "contents": "getDebugTrace()" },
        { "trigger": "getErrorTrace",                   "contents": "getErrorTrace()" },
        { "trigger": "getFieldViewValue",               "contents": "getFieldViewValue(fieldName, value, viewColumnName)" },
        { "trigger": "getFreeMemory",                   "contents": "getFreeMemory()" },
        { "trigger": "getHelpPage",                     "contents": "getHelpPage(helpId)" },
        { "trigger": "getOptionListSize", "contents": "getOptionListSize(list)" },
        { "trigger": "getRequiredMsg", "contents": "getRequiredMsg(fieldName, message)" },
        { "trigger": "getTextFile", "contents": "getTextFile()" },
        { "trigger": "getTotalMemory", "contents": "getTotalMemory()" },
        { "trigger": "getUserValue", "contents": "getUserValue(fieldName)" },
        { "trigger": "getValue",                "contents": "getValue(${1:rsName}, \"${2:varName}\")" },
        { "trigger": "getValueForSpecifiedUser", "contents": "getValueForSpecifiedUser('mjones', 'dFullName')" },


        "HasPredefinedAccounts",
        "HasUrl",
	"HasLocalCopy",
	"HeavyClient",
        "HttpAbsoluteCgiPath",
        "HttpAbsoluteCgiRoot",
        "HttpAbsoluteWebRoot",
        "HttpAdminCgiPath",
        "HttpASPPath",
        "HttpBrowserFullCgiPath",
        "HttpCgiPath",
        "HttpCommonRoot",
        "HttpEnterpriseCgiPath",
        "HttpFragmentsRoot",
        "HttpHelpRoot",
        "HttpIgnoreWebServerInternalPortNumber",
        "HttpImagesRoot",
        "HttpLayoutRoot",
        "HttpRelativeAdminRoot",
        "HttpRelativeCgiRoot",
        "HttpRelativeFragmentsRoot",
        "HttpRelativeWebRoot",
        "HttpRelativeWebsitesRoot",
        "HttpServerAddress",
        "HttpSharedRoot",
        "HttpSystemHelpRoot",
        "HttpWebRoot",
        "HttpWebsitesRoot",

        { "trigger": "idocTestForInclude", "contents": "idocTestForInclude(includeName)" },
        { "trigger": "inc", "contents": "inc(includeName)" },
        { "trigger": "incGlobal", "contents": "incGlobal(includeName)" },
        { "trigger": "incTemplate", "contents": "incTemplate(templateName)" },
        { "trigger": "isActiveTrace", "contents": "isActiveTrace()" },
	"isCheckin",
        "IsCheckinPreAuthed",
        "isComponentEnabled",
        "IsContributor",
        "IsCriteriaSubscription",
        "IsCurrentNav",
	"isDocPage",
        "IsDynamic",
	"isEditMode",
        "IsExternalUser",
	"isExcluded",
        { "trigger": "isFalse", "contents": "isFalse(string)" },
        "IsFilePresent",
        "IsFullTextIndexed",
        "IsLocalSearchCollectionID",
        "IsLoggedIn",
        "IsMac",
        "IsMaxRows",
        "IsMultiPage",
        "IsNotSyncRev",
        "IsPromptingForLogin",
        "IsRequestError",
        "IsSubAdmin",
        "IsSun",
        "IsSysManager",
        "IsUploadSockets",
        "IsUserEmailPresent",
        "IsWindows",
        "IsWorkflow",

        { "trigger": "js",                      "contents": "js(string)" },
        { "trigger": "lc",                      "contents": "lc(key, param)" },
        { "trigger": "lcCaption",               "contents": "lcCaption(string)" },
        { "trigger": "loadDocMetaDefinition",   "contents": "loadDocMetaDefinition()" },
        { "trigger": "loadEnterpriseSearchCollections", "contents": "loadEnterpriseSearchCollections(${1:includeAutoSearchServers})" },
        { "trigger": "loadEnterpriseSearchResults",     "contents": "loadEnterpriseSearchResults()" },
        { "trigger": "loadSearchOperatorTables", "contents": "loadSearchOperatorTables()" },
        { "trigger": "loadUserMetaDefinition",  "contents": "loadUserMetaDefinition()" },
        { "trigger": "localPageType",           "contents": "localPageType()" },
	"MSIE",

        { "trigger": "parseDataEntryDate",      "contents": "parseDataEntryDate()" },
        { "trigger": "parseDate",               "contents": "parseDate(date)" },
        { "trigger": "parseDateWithPattern",    "contents": "parseDateWithPattern(date, \"EEE, d MMM yyyy HH:mm:ss Z\")" },
        
        { "trigger": "rptDisplayMapValue",      "contents": "rptDisplayMapValue(table, key)" },
        { "trigger": "rs",                      "contents": "rs(rsName)" },
        { "trigger": "rsAddFields",             "contents": "rsAddFields(${1:rsName}, \"${2:fieldsList}\")" },
        { "trigger": "rsAddFieldsWithDefaults", "contents": "rsAddFieldsWithDefaults(${1:rsName}, fieldList, defaultList)" },
        { "trigger": "rsAddRowCountColumn",     "contents": "rsAddRowCountColumn(${1:rsName}, ${2:countFieldName})" },
        { "trigger": "rsAppend",                "contents": "rsAppend(${1:targetRsetName}, ${2:sourceRsetName})" },
        { "trigger": "rsAppendNewRow",          "contents": "rsAppendNewRow(${1:rsName})" },
        { "trigger": "rsAppendRowvalues",       "contents": "rsAppendRowvalues(${1:rsName}, ${2:rowValues}" },
        { "trigger": "rsCopyFiltered",          "contents": "rsCopyFiltered(${1:rsNameSource}, ${2:rsNameTarget}, ${3:filterField}, ${4:filterPattern})" },
        { "trigger": "rsCreateReference",       "contents": "rsCreateReference(rsName, rsName2)" },
        { "trigger": "rsCreateResultSet",       "contents": "rsCreateResultSet(${1:rsName}, ${2:fieldList})" },
        { "trigger": "rsDeleteRow",             "contents": "rsDeleteRow(${1:rsName})" },
        { "trigger": "rsDocInfoRowAllowDisclosure",     "contents": "rsDocInfoRowAllowDisclosure(${1:rsName})" },
        { "trigger": "rsExists",                "contents": "rsExists(${1:rsName})" },
        { "trigger": "rsFieldByIndex",          "contents": "rsFieldByIndex(${1:rsName}, ${2:index})" },
        { "trigger": "rsFieldExists",           "contents": "rsFieldExists(${1:rsName}, ${2:fieldName})" },
        { "trigger": "rsFindRowPrimary",        "contents": "rsFindRowPrimary(${1:rsName}, ${2:value})" },
        { "trigger": "rsFirst",                 "contents": "rsFirst(${1:rsName})" },
        { "trigger": "rsInsertNewRow",          "contents": "rsInsertNewRow(${1:rsName})" },
        { "trigger": "rsIsRowPresent",          "contents": "rsIsRowPresent(${1:rsName})" },

        { "trigger": "rsLoopInclude",           "contents": "rsLoopInclude(resultSetName, includeName)" },
        { "trigger": "rsLoopSingleRowInclude",  "contents": "rsLoopSingleRowInclude(resultSetName, includeName)" },

        { "trigger": "rsMakeFromList",          "contents": "rsMakeFromList(${1:rsName}, ${2:optionListName}, ${3:field})" },
        { "trigger": "rsMerge",                 "contents": "rsMerge(${1:rsNameTarget}, ${2:rsNameSource}, ${3:commonField})" },
        { "trigger": "rsMergeDelete",           "contents": "rsMergeDelete(${1:rsNameTarget}, ${2:rsNameSource}, ${3:rsCommonField})" },
        { "trigger": "rsMergeReplaceOnly",      "contents": "rsMergeReplaceOnly(${1:rsNameTarget}, ${2:rsNameSource}, ${3:rsCommonField})" },
        { "trigger": "rsNext",                  "contents": "rsNext(${1:rsName})" },
        { "trigger": "rsNumFields",             "contents": "rsNumFields(${1:rsName})" },
        { "trigger": "rsNumRows",               "contents": "rsNumRows(${1:rsName})" },
        { "trigger": "rsRemove",                "contents": "rsRemove(${1:rsName})" },
        { "trigger": "rsRename",                "contents": "rsRename(${1:from}, ${2:to})" },
        { "trigger": "rsRenameField",           "contents": "rsRenameField(${1:rsName}, ${2:from}, ${3:to})" },
        { "trigger": "rsSetRow",                "contents": "rsSetRow(${1:rsName}, ${2:index})" },
        { "trigger": "rsSort",                  "contents": "rsSort(${1:rsName}, ${2:sortCol}, ${3:sortType}, ${4:sortOrder})" },
        { "trigger": "rsSortTree",              "contents": "rsSortTree(${1:rsName}, ${2:itemIdCol}, ${3:parentIdCol}, ${4:nestLevelCol}, ${5:sortCol}, ${6:sortType}, ${7:sortOrder})" },
	"ScriptDebugTrace",
	"ScriptErrorTrace",
        { "trigger": "setContentType",          "contents": "setContentType(\"${1:text/plain}\")" },
        { "trigger": "setExpires",              "contents": "setExpires(dateString)" },
        { "trigger": "setHttpHeader",           "contents": "setHttpHeader(\"Content-Type\", \"text/xml\")" },
        { "trigger": "setMaxAge",               "contents": "setMaxAge(600)" },
        { "trigger": "setResourceInclude",      "contents": "setResourceInclude(includeName, \"idoc\")" },
        { "trigger": "setValue",                "contents": "setValue(${1:target}, ${2:name}, ${3:value})" },
        "SingleGroup",
        "SS_SERVER_NAME",
        "ssServerRelativeSiteRoot",
        { "trigger": "strCenterPad",            "contents": "strCenterPad(string, width)" },
        { "trigger": "strCommaAppendNoDuplicates", "contents": "strCommaAppendNoDuplicates(string, value)" },
        { "trigger": "strConfine",              "contents": "strConfine(string, width)" },
	"StrConfineOverflowChars",
        { "trigger": "strEquals",               "contents": "strEquals(stringA, stringB)" },
        { "trigger": "strEqualsIgnoreCase",     "contents": "strEqualsIgnoreCase(stringA, stringB)" },
        { "trigger": "strGenerateRandom",       "contents": "strGenerateRandom(length)" },
        { "trigger": "strIndexOf",              "contents": "strIndexOf(string, searchVal)" },
        { "trigger": "strLeftFill",             "contents": "strLeftFill(string, char, width)" },
        { "trigger": "strLeftPad",              "contents": "strLeftPad(string, width)" },
        { "trigger": "strLength",               "contents": "strLength(string)" },
        { "trigger": "strLower",                "contents": "strLower(string)" },
        { "trigger": "strRemoveWs",             "contents": "strRemoveWs(string)" },
        { "trigger": "strReplace",              "contents": "strReplace(string, searchVal, replacement)" },
        { "trigger": "strReplaceIgnoreCase",    "contents": "strReplaceIgnoreCase(string, searchVal, replace)" },
        { "trigger": "strRightFill",            "contents": "strRightFill(string, char, width)" },
        { "trigger": "strRightPad",             "contents": "strRightPad(string, width)" },
        { "trigger": "strSubstring",            "contents": "strSubstring(string, start)" },
        { "trigger": "strSubstring",            "contents": "strSubstring(string, start, end)" },
        { "trigger": "strTrimWs",               "contents": "strTrimWs(string)" },
        { "trigger": "strUpper",                "contents": "strUpper(string)" },

        { "trigger": "toInteger",               "contents": "toInteger(string)" },
        { "trigger": "trace",                   "contents": "trace(message, \"#console\")" },
        { "trigger": "trace",                   "contents": "trace(message, \"#console\", section)" },

        { "trigger": "url",                     "contents": "url(url)" },
        { "trigger": "urlEscape7Bit",           "contents": "urlEscape7Bit(url)" },
	"UserFullName",
        "UserIsAdmin",
        "UserLanguageID",
        "UserLocaleId",
	"UserName",
	"UserPublishCacheDir",
	"UserRoles",
        "UseXmlUrl",
        { "trigger": "utGetValue", "contents": "utGetValue(topic, name)" },
        { "trigger": "utLoad", "contents": "utLoad(topic)" },
        { "trigger": "utLoadDocumentProfiles", "contents": "utLoadDocumentProfiles(topic, rsName)" },
        { "trigger": "utLoadResultSet",         "contents": "utLoadResultSet(${1:topic}, ${2:rsName})" },

        { "trigger": "xml", "contents": "xml(string)" }

    ]
}